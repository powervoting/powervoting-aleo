// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// PostInvolveJSONBody defines parameters for PostInvolve.
type PostInvolveJSONBody struct {
	Participant string `json:"participant"`
	ProposalId  int    `json:"proposal_id"`
	Vote        string `json:"vote"`
}

// GetProposalsParams defines parameters for GetProposals.
type GetProposalsParams struct {
	// Page 页数
	Page int `form:"page" json:"page"`

	// PageSize 一页多少条数据
	PageSize int `form:"pageSize" json:"pageSize"`
}

// PatchProposalsJSONBody defines parameters for PatchProposals.
type PatchProposalsJSONBody struct {
	// Participate 更新的值
	Participate *string `json:"participate"`

	// ProposalId proposal_id不是数据库生成id，是投票项目的id
	ProposalId int `json:"proposal_id"`

	// Status 更新状态的值
	Status *string `json:"status"`

	// UpdateMask 需要更新的字段
	UpdateMask []string `json:"update_mask"`
}

// PostProposalsJSONBody defines parameters for PostProposals.
type PostProposalsJSONBody struct {
	Description string   `json:"description"`
	EndTime     int      `json:"end_time"`
	Option      []string `json:"option"`
	Participate string   `json:"participate"`
	ProposalId  int      `json:"proposal_id"`
	StartTime   int      `json:"start_time"`
	Status      string   `json:"status"`
	Title       string   `json:"title"`
}

// PostReceivedJSONBody defines parameters for PostReceived.
type PostReceivedJSONBody struct {
	ProposalId int    `json:"proposal_id"`
	Receiver   string `json:"receiver"`
}

// GetReceivedProposalIdParams defines parameters for GetReceivedProposalId.
type GetReceivedProposalIdParams struct {
	Receiver string `form:"receiver" json:"receiver"`
}

// PostRecordJSONBody defines parameters for PostRecord.
type PostRecordJSONBody struct {
	ProposalId int    `json:"proposal_id"`
	Win        string `json:"win"`
}

// GetRecordProposalIdParams defines parameters for GetRecordProposalId.
type GetRecordProposalIdParams struct {
	Participant string `form:"participant" json:"participant"`
}

// GetVoteProposalIdParams defines parameters for GetVoteProposalId.
type GetVoteProposalIdParams struct {
	Participant string `form:"participant" json:"participant"`
}

// PostInvolveJSONRequestBody defines body for PostInvolve for application/json ContentType.
type PostInvolveJSONRequestBody PostInvolveJSONBody

// PatchProposalsJSONRequestBody defines body for PatchProposals for application/json ContentType.
type PatchProposalsJSONRequestBody PatchProposalsJSONBody

// PostProposalsJSONRequestBody defines body for PostProposals for application/json ContentType.
type PostProposalsJSONRequestBody PostProposalsJSONBody

// PostReceivedJSONRequestBody defines body for PostReceived for application/json ContentType.
type PostReceivedJSONRequestBody PostReceivedJSONBody

// PostRecordJSONRequestBody defines body for PostRecord for application/json ContentType.
type PostRecordJSONRequestBody PostRecordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 创建投票
	// (POST /involve)
	PostInvolve(c *gin.Context)
	// 查询投票
	// (GET /involve/{proposal_id})
	GetInvolveProposalId(c *gin.Context, proposalId int)
	// 查询投票项目列表
	// (GET /proposals)
	GetProposals(c *gin.Context, params GetProposalsParams)
	// 更新投票项目状态
	// (PATCH /proposals)
	PatchProposals(c *gin.Context)
	// 创建投票项目
	// (POST /proposals)
	PostProposals(c *gin.Context)
	// 查询投票项目信息
	// (GET /proposals/{proposal_id})
	GetProposalsProposalId(c *gin.Context, proposalId int)
	// 存储领取 NFT 接口
	// (POST /received)
	PostReceived(c *gin.Context)
	// 查询 NFT
	// (GET /received/{proposal_id})
	GetReceivedProposalId(c *gin.Context, proposalId int, params GetReceivedProposalIdParams)
	// 创建计票结果
	// (POST /record)
	PostRecord(c *gin.Context)
	// 查询计票结果
	// (GET /record/{proposal_id})
	GetRecordProposalId(c *gin.Context, proposalId int, params GetRecordProposalIdParams)
	// 查询已投票
	// (GET /vote/{proposal_id})
	GetVoteProposalId(c *gin.Context, proposalId int, params GetVoteProposalIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostInvolve operation middleware
func (siw *ServerInterfaceWrapper) PostInvolve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostInvolve(c)
}

// GetInvolveProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetInvolveProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetInvolveProposalId(c, proposalId)
}

// GetProposals operation middleware
func (siw *ServerInterfaceWrapper) GetProposals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProposalsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument pageSize is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProposals(c, params)
}

// PatchProposals operation middleware
func (siw *ServerInterfaceWrapper) PatchProposals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchProposals(c)
}

// PostProposals operation middleware
func (siw *ServerInterfaceWrapper) PostProposals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostProposals(c)
}

// GetProposalsProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetProposalsProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProposalsProposalId(c, proposalId)
}

// PostReceived operation middleware
func (siw *ServerInterfaceWrapper) PostReceived(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostReceived(c)
}

// GetReceivedProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetReceivedProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReceivedProposalIdParams

	// ------------- Required query parameter "receiver" -------------

	if paramValue := c.Query("receiver"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument receiver is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "receiver", c.Request.URL.Query(), &params.Receiver)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter receiver: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetReceivedProposalId(c, proposalId, params)
}

// PostRecord operation middleware
func (siw *ServerInterfaceWrapper) PostRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecord(c)
}

// GetRecordProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetRecordProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordProposalIdParams

	// ------------- Required query parameter "participant" -------------

	if paramValue := c.Query("participant"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument participant is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "participant", c.Request.URL.Query(), &params.Participant)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participant: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecordProposalId(c, proposalId, params)
}

// GetVoteProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetVoteProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoteProposalIdParams

	// ------------- Required query parameter "participant" -------------

	if paramValue := c.Query("participant"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument participant is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "participant", c.Request.URL.Query(), &params.Participant)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participant: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVoteProposalId(c, proposalId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/involve", wrapper.PostInvolve)

	router.GET(options.BaseURL+"/involve/:proposal_id", wrapper.GetInvolveProposalId)

	router.GET(options.BaseURL+"/proposals", wrapper.GetProposals)

	router.PATCH(options.BaseURL+"/proposals", wrapper.PatchProposals)

	router.POST(options.BaseURL+"/proposals", wrapper.PostProposals)

	router.GET(options.BaseURL+"/proposals/:proposal_id", wrapper.GetProposalsProposalId)

	router.POST(options.BaseURL+"/received", wrapper.PostReceived)

	router.GET(options.BaseURL+"/received/:proposal_id", wrapper.GetReceivedProposalId)

	router.POST(options.BaseURL+"/record", wrapper.PostRecord)

	router.GET(options.BaseURL+"/record/:proposal_id", wrapper.GetRecordProposalId)

	router.GET(options.BaseURL+"/vote/:proposal_id", wrapper.GetVoteProposalId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hHMsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
