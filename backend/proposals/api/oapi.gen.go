// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// PostInvolveJSONBody defines parameters for PostInvolve.
type PostInvolveJSONBody struct {
	Participant string `json:"participant"`
	ProposalId  int    `json:"proposal_id"`
	Vote        string `json:"vote"`
}

// GetProposalsParams defines parameters for GetProposals.
type GetProposalsParams struct {
	// Page 页数
	Page int `form:"page" json:"page"`

	// PageSize 一页多少条数据
	PageSize int `form:"pageSize" json:"pageSize"`
}

// PatchProposalsJSONBody defines parameters for PatchProposals.
type PatchProposalsJSONBody struct {
	// Participate 更新的值
	Participate *string `json:"participate"`

	// ProposalId proposal_id不是数据库生成id，是投票项目的id
	ProposalId int `json:"proposal_id"`

	// Status 更新状态的值
	Status *string `json:"status"`

	// UpdateMask 需要更新的字段
	UpdateMask []string `json:"update_mask"`
}

// PostProposalsJSONBody defines parameters for PostProposals.
type PostProposalsJSONBody struct {
	Description string   `json:"description"`
	EndTime     string   `json:"end_time"`
	Option      []string `json:"option"`
	Participate string   `json:"participate"`
	ProposalId  int      `json:"proposal_id"`
	StartTime   string   `json:"start_time"`
	Status      string   `json:"status"`
	Title       string   `json:"title"`
}

// PostRecordJSONBody defines parameters for PostRecord.
type PostRecordJSONBody struct {
	ProposalId int    `json:"proposal_id"`
	Win        string `json:"win"`
}

// GetRecordProposalIdParams defines parameters for GetRecordProposalId.
type GetRecordProposalIdParams struct {
	Participant string `form:"participant" json:"participant"`
}

// PostInvolveJSONRequestBody defines body for PostInvolve for application/json ContentType.
type PostInvolveJSONRequestBody PostInvolveJSONBody

// PatchProposalsJSONRequestBody defines body for PatchProposals for application/json ContentType.
type PatchProposalsJSONRequestBody PatchProposalsJSONBody

// PostProposalsJSONRequestBody defines body for PostProposals for application/json ContentType.
type PostProposalsJSONRequestBody PostProposalsJSONBody

// PostRecordJSONRequestBody defines body for PostRecord for application/json ContentType.
type PostRecordJSONRequestBody PostRecordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 创建投票
	// (POST /involve)
	PostInvolve(c *gin.Context)
	// 查询投票
	// (GET /involve/{proposal_id})
	GetInvolveProposalId(c *gin.Context, proposalId string)
	// 查询投票项目列表
	// (GET /proposals)
	GetProposals(c *gin.Context, params GetProposalsParams)
	// 更新投票项目状态
	// (PATCH /proposals)
	PatchProposals(c *gin.Context)
	// 创建投票项目
	// (POST /proposals)
	PostProposals(c *gin.Context)
	// 查询投票项目信息
	// (GET /proposals/{proposal_id})
	GetProposalsProposalId(c *gin.Context, proposalId string)
	// 创建计票结果
	// (POST /record)
	PostRecord(c *gin.Context)
	// 查询计票结果
	// (GET /record/{proposal_id})
	GetRecordProposalId(c *gin.Context, proposalId int, params GetRecordProposalIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostInvolve operation middleware
func (siw *ServerInterfaceWrapper) PostInvolve(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostInvolve(c)
}

// GetInvolveProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetInvolveProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId string

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetInvolveProposalId(c, proposalId)
}

// GetProposals operation middleware
func (siw *ServerInterfaceWrapper) GetProposals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProposalsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument pageSize is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProposals(c, params)
}

// PatchProposals operation middleware
func (siw *ServerInterfaceWrapper) PatchProposals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchProposals(c)
}

// PostProposals operation middleware
func (siw *ServerInterfaceWrapper) PostProposals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostProposals(c)
}

// GetProposalsProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetProposalsProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId string

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProposalsProposalId(c, proposalId)
}

// PostRecord operation middleware
func (siw *ServerInterfaceWrapper) PostRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecord(c)
}

// GetRecordProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetRecordProposalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int

	err = runtime.BindStyledParameter("simple", false, "proposal_id", c.Param("proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter proposal_id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordProposalIdParams

	// ------------- Required query parameter "participant" -------------

	if paramValue := c.Query("participant"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument participant is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "participant", c.Request.URL.Query(), &params.Participant)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participant: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecordProposalId(c, proposalId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/involve", wrapper.PostInvolve)

	router.GET(options.BaseURL+"/involve/:proposal_id", wrapper.GetInvolveProposalId)

	router.GET(options.BaseURL+"/proposals", wrapper.GetProposals)

	router.PATCH(options.BaseURL+"/proposals", wrapper.PatchProposals)

	router.POST(options.BaseURL+"/proposals", wrapper.PostProposals)

	router.GET(options.BaseURL+"/proposals/:proposal_id", wrapper.GetProposalsProposalId)

	router.POST(options.BaseURL+"/record", wrapper.PostRecord)

	router.GET(options.BaseURL+"/record/:proposal_id", wrapper.GetRecordProposalId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
